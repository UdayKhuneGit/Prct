Fibonacci Numbers :-
The two first Fibonacci numbers are 0 and 1, and the next Fibonacci number is always the sum of the two previous numbers, so we get 0, 1, 1, 2, 3, 5, 8, 13, 21, ...

The Fibonacci Number Algorithm
To generate a Fibonacci number, all we need to do is to add the two previous Fibonacci numbers.

The Fibonacci numbers is a good way of demonstrating what an algorithm is. We know the principle of how to find the next number, so we can write an algorithm to create as many Fibonacci numbers as possible.

Below is the algorithm to create the 20 first Fibonacci numbers.

How it works:

Start with the two first Fibonacci numbers 0 and 1.
   a :-Add the two previous numbers together to create a new Fibonacci number.
   b :-Update the value of the two previous numbers.
Do point a and b above 18 times.

Loops vs Recursion
To show the difference between loops and recursion, we will implement solutions to find Fibonacci numbers in three different ways:

1:An implementation of the Fibonacci algorithm above using a for loop.
2:An implementation of the Fibonacci algorithm above using recursion.
3:Finding the nth Fibonacci number using recursion.
1. Implementation Using a For Loop
It can be a good idea to list what the code must contain or do before programming it:

Two variables to hold the previous two Fibonacci numbers
A for loop that runs 18 times
Create new Fibonacci numbers by adding the two previous ones
Print the new Fibonacci number
Update the variables that hold the previous two fibonacci numbers
EXAMPLE :--

public class Main {
    public static void main(String[] args) {
        int prev2 = 0;
        int prev1 = 1;

        System.out.println(prev2);
        System.out.println(prev1);

        for(int fibo = 0; fibo < 18; fibo++) {
            int newFibo = prev1 + prev2;
            System.out.println(newFibo);
            prev2 = prev1;
            prev1 = newFibo;
        }
    }
}



2. Implementation Using Recursion
Recursion is when a function calls itself.

To implement the Fibonacci algorithm we need most of the same things as in the code example above, but we need to replace the for loop with recursion.

To replace the for loop with recursion, we need to encapsulate much of the code in a function, and we need the function to call itself to create a new Fibonacci number as long as the produced number of Fibonacci numbers is below, or equal to, 19.

Our code looks like this:
EXAMPLE:---
public class Main {
    static int count = 2;

    public static void fibonacci(int prev1, int prev2) {
        if (count <= 19) {
            int newFibo = prev1 + prev2;
            System.out.println(newFibo);
            prev2 = prev1;
            prev1 = newFibo;
            count += 1;
            fibonacci(prev1, prev2);
        } else {
            return;
        }
    }

    public static void main(String[] args) {
        System.out.println(0);
        System.out.println(1);
        fibonacci(1, 0);
    }
}


3. Finding The nth Fibonacci Number Using Recursion
EXAMPLE:---
public class Main {
    public static int F(int n) {
        if (n <= 1) {
            return n;
        } else {
            return F(n - 1) + F(n - 2);
        }
    }

    public static void main(String[] args) {
        System.out.println(F(19));
    }
}

Notice that this recursive method calls itself two times, not just one.
This makes a huge difference in how the program will actually run on our computer. 
The number of calculations will explode when we increase the number of the Fibonacci number we want. 
To be more precise, the number of function calls will double every time we increase the Fibonacci number we want by one.

There are two important things to notice here: The amount of function calls, and the amount of times the function is called with the same arguments.
So even though the code is fascinating and shows how recursion work, the actual code execution is too slow and ineffective to use for creating large Fibonacci numbers.

what we have seen so far:
An algorithm can be implemented in different ways and in different programming languages.
Recursion and loops are two different programming techniques that can be used to implement algorithms.
It is time to move on to the first data structure we will look at, the array.
